// Prisma schema for the Fitness SaaS
// Defines core authentication tables used by NextAuth

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  runningPlans  RunningPlan[]
  foodEntries   FoodEntry[]
  waterLogs     WaterLog[]
  tmbRecords    TmbRecord[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Domain-specific models (simplified)

// Running plan sessions for the 5K module
model RunningPlan {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  week       Int
  session    Int
  rpe        Int?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Food item definition
model Food {
  id        String  @id @default(cuid())
  name      String
  category  String?
  source    String   // 'TACO', 'FDC', 'OFF', 'USER'
  calories  Float?
  protein   Float?
  carbs     Float?
  fat       Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entries   FoodEntry[]
}

// Food diary entry for a user
model FoodEntry {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodId    String
  food      Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  quantity  Float
  mealTime  DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Water intake log
model WaterLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime
  amount    Float   // amount in milliliters
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// TMB/TDEE calculation record
model TmbRecord {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  formula     String   // Mifflin-St Jeor, Harris-Benedict
  tmb         Float
  tdee        Float
  targetCalories Float
  proteinGoal Float
  fatGoal    Float
  carbsGoal  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}